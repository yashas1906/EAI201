> & C:/Users/sukuh/AppData/Local/Programs/Python/Python312/python.exe c:/Users/sukuh/.git/EAI201/rat_escape/bfs_alg_rat.py

Helping the rat to escape the underground pipes

Through Breadth-First Search (BFS)

Path Found

Path Followed: A -> C -> F

Total Cost of Path (pipes traveled): 2

Total Junctions in Path: 3

Total Junctions Explored by BFS: 6

PS C:\Users\sukuh\.git\EAI201> & C:/Users/sukuh/AppData/Local/Programs/Python/Python312/python.exe c:/Users/sukuh/.git/EAI201/rat_escape/dfs_alg_rat.py

Helping the rat to escape the underground pipes

Through Depth-First Search (DFS)

Path Found

Path Followed: A -> B -> E -> F

Total Cost of Path (pipes traveled): 3

Total Junctions in Path: 4

Total Junctions Explored by DFS: 5

PS C:\Users\sukuh\.git\EAI201> & C:/Users/sukuh/AppData/Local/Programs/Python/Python312/python.exe c:/Users/sukuh/.git/EAI201/rat_escape/ucs_alg_rat.py

Helping the rat to escape the underground pipes

Through Uniform Cost Search (UCS)

Path Found

Path Followed: A -> C -> F

Total Cost of Path: 7

Total Junctions in Path: 3

Total Junctions Explored by UCS: 6

PS C:\Users\sukuh\.git\EAI201> & C:/Users/sukuh/AppData/Local/Programs/Python/Python312/python.exe c:/Users/sukuh/.git/EAI201/rat_escape/A_star_alg_rat.py

Helping the rat to escape the underground pipes

Through A* Search 

Path Found

Path Followed: A -> C -> F

Total Cost of Path: 7

Total Junctions in Path: 3

Total Junctions Explored by A*: 4

PS C:\Users\sukuh\.git\EAI201> 


Conclusion :

A* search is the better algorithm compared to all others.
it successfully finds the cheapest possible path while doing the least amount of work
if we rank all the algorithms :
1st - A* search
2nd - UCSÂ 
3rd - BFS
4th - DFS